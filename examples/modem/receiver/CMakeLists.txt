PROJECT(iridium-receiver)
CMAKE_MINIMUM_REQUIRED(VERSION 3.7)

SET(CMAKE_C_STANDARD 99)
SET(CMAKE_C_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

IF(CMAKE_BUILD_TYPE STREQUAL "Release")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s")
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")

SET(CMAKE_C_FLAGS "-Wextra -Wall ${CMAKE_C_FLAGS}")
SET(CMAKE_CXX_FLAGS "-Wextra -Wall -Wnon-virtual-dtor -fstack-protector-all ${CMAKE_CXX_FLAGS}")

# GNU filesystem layout conventions
INCLUDE(GNUInstallDirs)
INCLUDE(FindThreads)

set(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_LIBS ON)
FIND_PACKAGE(Boost 1.62 COMPONENTS system thread REQUIRED)
FIND_PACKAGE(PkgConfig REQUIRED MODULE)
PKG_CHECK_MODULES(IRIDIUM REQUIRED iridium)

SET(HEADERS
    LockFile.hpp
)

SET(SOURCES
    LockFile.cpp
    main.cpp
)

ADD_EXECUTABLE(${PROJECT_NAME} ${HEADERS} ${SOURCES})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE
    ${Boost_INCLUDE_DIR}
    ${IRIDIUM_INCLUDE_DIRS}
)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    ${Boost_SYSTEM_LIBRARY}
    ${Boost_THREAD_LIBRARY}
    ${IRIDIUM_LDFLAGS}
    ${CMAKE_THREAD_LIBS_INIT}
)
